//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherViewPathResources;

    public static Entitas.IMatcher<GameEntity> ViewPathResources {
        get {
            if (_matcherViewPathResources == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ViewPathResources);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherViewPathResources = matcher;
            }

            return _matcherViewPathResources;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Common.ViewPathResources viewPathResources { get { return (Code.Common.ViewPathResources)GetComponent(GameComponentsLookup.ViewPathResources); } }
    public string ViewPathResources { get { return viewPathResources.Value; } }
    public bool hasViewPathResources { get { return HasComponent(GameComponentsLookup.ViewPathResources); } }

    public GameEntity AddViewPathResources(string newValue) {
        var index = GameComponentsLookup.ViewPathResources;
        var component = (Code.Common.ViewPathResources)CreateComponent(index, typeof(Code.Common.ViewPathResources));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceViewPathResources(string newValue) {
        var index = GameComponentsLookup.ViewPathResources;
        var component = (Code.Common.ViewPathResources)CreateComponent(index, typeof(Code.Common.ViewPathResources));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveViewPathResources() {
        RemoveComponent(GameComponentsLookup.ViewPathResources);
        return this;
    }
}
