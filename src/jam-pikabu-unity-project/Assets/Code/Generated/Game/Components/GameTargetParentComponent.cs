//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTargetParent;

    public static Entitas.IMatcher<GameEntity> TargetParent {
        get {
            if (_matcherTargetParent == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TargetParent);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTargetParent = matcher;
            }

            return _matcherTargetParent;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Common.TargetParent targetParent { get { return (Code.Common.TargetParent)GetComponent(GameComponentsLookup.TargetParent); } }
    public UnityEngine.Transform TargetParent { get { return targetParent.Value; } }
    public bool hasTargetParent { get { return HasComponent(GameComponentsLookup.TargetParent); } }

    public GameEntity AddTargetParent(UnityEngine.Transform newValue) {
        var index = GameComponentsLookup.TargetParent;
        var component = (Code.Common.TargetParent)CreateComponent(index, typeof(Code.Common.TargetParent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceTargetParent(UnityEngine.Transform newValue) {
        var index = GameComponentsLookup.TargetParent;
        var component = (Code.Common.TargetParent)CreateComponent(index, typeof(Code.Common.TargetParent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveTargetParent() {
        RemoveComponent(GameComponentsLookup.TargetParent);
        return this;
    }
}
