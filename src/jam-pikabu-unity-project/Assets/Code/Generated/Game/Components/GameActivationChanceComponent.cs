//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherActivationChance;

    public static Entitas.IMatcher<GameEntity> ActivationChance {
        get {
            if (_matcherActivationChance == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ActivationChance);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherActivationChance = matcher;
            }

            return _matcherActivationChance;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Abilities.ActivationChance activationChance { get { return (Code.Gameplay.Features.Abilities.ActivationChance)GetComponent(GameComponentsLookup.ActivationChance); } }
    public int ActivationChance { get { return activationChance.Value; } }
    public bool hasActivationChance { get { return HasComponent(GameComponentsLookup.ActivationChance); } }

    public GameEntity AddActivationChance(int newValue) {
        var index = GameComponentsLookup.ActivationChance;
        var component = (Code.Gameplay.Features.Abilities.ActivationChance)CreateComponent(index, typeof(Code.Gameplay.Features.Abilities.ActivationChance));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceActivationChance(int newValue) {
        var index = GameComponentsLookup.ActivationChance;
        var component = (Code.Gameplay.Features.Abilities.ActivationChance)CreateComponent(index, typeof(Code.Gameplay.Features.Abilities.ActivationChance));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveActivationChance() {
        RemoveComponent(GameComponentsLookup.ActivationChance);
        return this;
    }
}
