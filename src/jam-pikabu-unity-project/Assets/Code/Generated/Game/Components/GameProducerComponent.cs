//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherProducer;

    public static Entitas.IMatcher<GameEntity> Producer {
        get {
            if (_matcherProducer == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Producer);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherProducer = matcher;
            }

            return _matcherProducer;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Common.Producer producer { get { return (Code.Common.Producer)GetComponent(GameComponentsLookup.Producer); } }
    public int Producer { get { return producer.Value; } }
    public bool hasProducer { get { return HasComponent(GameComponentsLookup.Producer); } }

    public GameEntity AddProducer(int newValue) {
        var index = GameComponentsLookup.Producer;
        var component = (Code.Common.Producer)CreateComponent(index, typeof(Code.Common.Producer));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceProducer(int newValue) {
        var index = GameComponentsLookup.Producer;
        var component = (Code.Common.Producer)CreateComponent(index, typeof(Code.Common.Producer));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveProducer() {
        RemoveComponent(GameComponentsLookup.Producer);
        return this;
    }
}
