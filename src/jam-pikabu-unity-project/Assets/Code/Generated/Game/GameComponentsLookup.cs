//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentLookupGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public static class GameComponentsLookup {

    public const int Destructed = 0;
    public const int Producer = 1;
    public const int Radius = 2;
    public const int SelfDestructTimer = 3;
    public const int Target = 4;
    public const int TargetParent = 5;
    public const int Targets = 6;
    public const int View = 7;
    public const int ViewPathAddressables = 8;
    public const int ViewPathResources = 9;
    public const int ViewPrefab = 10;
    public const int ViewPrefabLoadProcessing = 11;
    public const int CollisionId = 12;
    public const int Id = 13;
    public const int Rigidbody2D = 14;
    public const int SpriteRenderer = 15;
    public const int StartRotation = 16;
    public const int StartWorldPosition = 17;
    public const int Transform = 18;
    public const int WorldPosition = 19;
    public const int Ability = 20;
    public const int AbilityDuration = 21;
    public const int AbilityType = 22;
    public const int AbilityVisuals = 23;
    public const int ActivationChance = 24;
    public const int BounceStrength = 25;
    public const int BouncyAbility = 26;
    public const int ChangeSizesAbility = 27;
    public const int HookSpeedChangeAbility = 28;
    public const int SpeedChangeAmount = 29;
    public const int SwapPositionsAbility = 30;
    public const int CollidedBy = 31;
    public const int Collider = 32;
    public const int Collision = 33;
    public const int TriggerCollider = 34;
    public const int TriggeredBy = 35;
    public const int Cooldown = 36;
    public const int CooldownLeft = 37;
    public const int CooldownUp = 38;
    public const int AddCurrencyRequest = 39;
    public const int CurrencyStorage = 40;
    public const int CurrencyTypeId = 41;
    public const int Gold = 42;
    public const int Minus = 43;
    public const int Plus = 44;
    public const int Withdraw = 45;
    public const int CustomerBehaviour = 46;
    public const int BeginDay = 47;
    public const int EndDay = 48;
    public const int GameState = 49;
    public const int GameStateTypeId = 50;
    public const int RoundCompletion = 51;
    public const int RoundLoop = 52;
    public const int RoundPreparation = 53;
    public const int StateProcessingAvailable = 54;
    public const int SwitchGameStateRequest = 55;
    public const int Ascending = 56;
    public const int AscentAvailable = 57;
    public const int AscentRequested = 58;
    public const int Busy = 59;
    public const int ClosingClaws = 60;
    public const int CollectingLoot = 61;
    public const int CollectLootPieceInterval = 62;
    public const int CollectLootRaycastRadius = 63;
    public const int CollectLootRequest = 64;
    public const int Descending = 65;
    public const int DescentAvailable = 66;
    public const int DescentRequested = 67;
    public const int GrapplingHook = 68;
    public const int GrapplingHookBehaviour = 69;
    public const int HookSpeedModifier = 70;
    public const int StopMovementRaycastRadius = 71;
    public const int XAxisMoveDirection = 72;
    public const int XAxisMovementAvailable = 73;
    public const int XAxisSpeed = 74;
    public const int XMovementLimits = 75;
    public const int YAxisDownSpeed = 76;
    public const int YAxisUpSpeed = 77;
    public const int Applied = 78;
    public const int Available = 79;
    public const int BaseRating = 80;
    public const int Collected = 81;
    public const int ConsumableIngredient = 82;
    public const int Consumed = 83;
    public const int Effect = 84;
    public const int EffectTargetsLoot = 85;
    public const int EffectValue = 86;
    public const int IncreaseValueEffect = 87;
    public const int Loot = 88;
    public const int LootEffectsApplier = 89;
    public const int LootItem = 90;
    public const int LootItemUI = 91;
    public const int LootTypeId = 92;
    public const int Rating = 93;
    public const int TimerRefillAmount = 94;
    public const int Wood = 95;
    public const int ContinuousSpawn = 96;
    public const int ConveyorSpawner = 97;
    public const int LootSpawner = 98;
    public const int LootSpawnInterval = 99;
    public const int SingleSpawn = 100;
    public const int BossOrder = 101;
    public const int Complete = 102;
    public const int NextOrderRequest = 103;
    public const int Order = 104;
    public const int OrderData = 105;
    public const int OrderReward = 106;
    public const int Reject = 107;
    public const int ResultProcessed = 108;
    public const int DayCompleteRequest = 109;
    public const int GameOver = 110;
    public const int Round = 111;
    public const int RoundComplete = 112;
    public const int RoundDuration = 113;
    public const int RoundInProcess = 114;
    public const int RoundOver = 115;
    public const int RoundStartAvailable = 116;
    public const int RoundStartRequest = 117;
    public const int RoundStateController = 118;
    public const int RoundStateViewBehaviour = 119;
    public const int RoundTimeLeft = 120;
    public const int AudioSourceBehaviour = 121;

    public const int TotalComponents = 122;

    public static readonly string[] componentNames = {
        "Destructed",
        "Producer",
        "Radius",
        "SelfDestructTimer",
        "Target",
        "TargetParent",
        "Targets",
        "View",
        "ViewPathAddressables",
        "ViewPathResources",
        "ViewPrefab",
        "ViewPrefabLoadProcessing",
        "CollisionId",
        "Id",
        "Rigidbody2D",
        "SpriteRenderer",
        "StartRotation",
        "StartWorldPosition",
        "Transform",
        "WorldPosition",
        "Ability",
        "AbilityDuration",
        "AbilityType",
        "AbilityVisuals",
        "ActivationChance",
        "BounceStrength",
        "BouncyAbility",
        "ChangeSizesAbility",
        "HookSpeedChangeAbility",
        "SpeedChangeAmount",
        "SwapPositionsAbility",
        "CollidedBy",
        "Collider",
        "Collision",
        "TriggerCollider",
        "TriggeredBy",
        "Cooldown",
        "CooldownLeft",
        "CooldownUp",
        "AddCurrencyRequest",
        "CurrencyStorage",
        "CurrencyTypeId",
        "Gold",
        "Minus",
        "Plus",
        "Withdraw",
        "CustomerBehaviour",
        "BeginDay",
        "EndDay",
        "GameState",
        "GameStateTypeId",
        "RoundCompletion",
        "RoundLoop",
        "RoundPreparation",
        "StateProcessingAvailable",
        "SwitchGameStateRequest",
        "Ascending",
        "AscentAvailable",
        "AscentRequested",
        "Busy",
        "ClosingClaws",
        "CollectingLoot",
        "CollectLootPieceInterval",
        "CollectLootRaycastRadius",
        "CollectLootRequest",
        "Descending",
        "DescentAvailable",
        "DescentRequested",
        "GrapplingHook",
        "GrapplingHookBehaviour",
        "HookSpeedModifier",
        "StopMovementRaycastRadius",
        "XAxisMoveDirection",
        "XAxisMovementAvailable",
        "XAxisSpeed",
        "XMovementLimits",
        "YAxisDownSpeed",
        "YAxisUpSpeed",
        "Applied",
        "Available",
        "BaseRating",
        "Collected",
        "ConsumableIngredient",
        "Consumed",
        "Effect",
        "EffectTargetsLoot",
        "EffectValue",
        "IncreaseValueEffect",
        "Loot",
        "LootEffectsApplier",
        "LootItem",
        "LootItemUI",
        "LootTypeId",
        "Rating",
        "TimerRefillAmount",
        "Wood",
        "ContinuousSpawn",
        "ConveyorSpawner",
        "LootSpawner",
        "LootSpawnInterval",
        "SingleSpawn",
        "BossOrder",
        "Complete",
        "NextOrderRequest",
        "Order",
        "OrderData",
        "OrderReward",
        "Reject",
        "ResultProcessed",
        "DayCompleteRequest",
        "GameOver",
        "Round",
        "RoundComplete",
        "RoundDuration",
        "RoundInProcess",
        "RoundOver",
        "RoundStartAvailable",
        "RoundStartRequest",
        "RoundStateController",
        "RoundStateViewBehaviour",
        "RoundTimeLeft",
        "AudioSourceBehaviour"
    };

    public static readonly System.Type[] componentTypes = {
        typeof(Code.Common.Destructed),
        typeof(Code.Common.Producer),
        typeof(Code.Common.Radius),
        typeof(Code.Common.SelfDestructTimer),
        typeof(Code.Common.Target),
        typeof(Code.Common.TargetParent),
        typeof(Code.Common.Targets),
        typeof(Code.Common.View),
        typeof(Code.Common.ViewPathAddressables),
        typeof(Code.Common.ViewPathResources),
        typeof(Code.Common.ViewPrefab),
        typeof(Code.Common.ViewPrefabLoadProcessing),
        typeof(Code.Gameplay.Common.CollisionId),
        typeof(Code.Gameplay.Common.Id),
        typeof(Code.Gameplay.Common.Rigidbody2DComponent),
        typeof(Code.Gameplay.Common.SpriteRendererComponent),
        typeof(Code.Gameplay.Common.StartRotation),
        typeof(Code.Gameplay.Common.StartWorldPosition),
        typeof(Code.Gameplay.Common.TransformComponent),
        typeof(Code.Gameplay.Common.WorldPosition),
        typeof(Code.Gameplay.Features.Abilities.Ability),
        typeof(Code.Gameplay.Features.Abilities.AbilityDuration),
        typeof(Code.Gameplay.Features.Abilities.AbilityType),
        typeof(Code.Gameplay.Features.Abilities.AbilityVisualsComponent),
        typeof(Code.Gameplay.Features.Abilities.ActivationChance),
        typeof(Code.Gameplay.Features.Abilities.BounceStrength),
        typeof(Code.Gameplay.Features.Abilities.BouncyAbility),
        typeof(Code.Gameplay.Features.Abilities.ChangeSizesAbility),
        typeof(Code.Gameplay.Features.Abilities.HookSpeedChangeAbility),
        typeof(Code.Gameplay.Features.Abilities.SpeedChangeAmount),
        typeof(Code.Gameplay.Features.Abilities.SwapPositionsAbility),
        typeof(Code.Gameplay.Features.CollidingView.CollidedByComponent),
        typeof(Code.Gameplay.Features.CollidingView.ColliderComponent),
        typeof(Code.Gameplay.Features.CollidingView.CollisionComponent),
        typeof(Code.Gameplay.Features.CollidingView.TriggerCollider),
        typeof(Code.Gameplay.Features.CollidingView.TriggeredByComponent),
        typeof(Code.Gameplay.Features.Cooldowns.Cooldown),
        typeof(Code.Gameplay.Features.Cooldowns.CooldownLeft),
        typeof(Code.Gameplay.Features.Cooldowns.CooldownUp),
        typeof(Code.Gameplay.Features.Currency.AddCurrencyRequest),
        typeof(Code.Gameplay.Features.Currency.CurrencyStorage),
        typeof(Code.Gameplay.Features.Currency.CurrencyTypeIdComponent),
        typeof(Code.Gameplay.Features.Currency.Gold),
        typeof(Code.Gameplay.Features.Currency.Minus),
        typeof(Code.Gameplay.Features.Currency.Plus),
        typeof(Code.Gameplay.Features.Currency.Withdraw),
        typeof(Code.Gameplay.Features.Customers.CustomerBehaviourComponent),
        typeof(Code.Gameplay.Features.GameState.BeginDay),
        typeof(Code.Gameplay.Features.GameState.EndDay),
        typeof(Code.Gameplay.Features.GameState.GameState),
        typeof(Code.Gameplay.Features.GameState.GameStateTypeIdComponent),
        typeof(Code.Gameplay.Features.GameState.RoundCompletion),
        typeof(Code.Gameplay.Features.GameState.RoundLoop),
        typeof(Code.Gameplay.Features.GameState.RoundPreparation),
        typeof(Code.Gameplay.Features.GameState.StateProcessingAvailable),
        typeof(Code.Gameplay.Features.GameState.SwitchGameStateRequest),
        typeof(Code.Gameplay.Features.GrapplingHook.Ascending),
        typeof(Code.Gameplay.Features.GrapplingHook.AscentAvailable),
        typeof(Code.Gameplay.Features.GrapplingHook.AscentRequested),
        typeof(Code.Gameplay.Features.GrapplingHook.Busy),
        typeof(Code.Gameplay.Features.GrapplingHook.ClosingClaws),
        typeof(Code.Gameplay.Features.GrapplingHook.CollectingLoot),
        typeof(Code.Gameplay.Features.GrapplingHook.CollectLootPieceInterval),
        typeof(Code.Gameplay.Features.GrapplingHook.CollectLootRaycastRadius),
        typeof(Code.Gameplay.Features.GrapplingHook.CollectLootRequest),
        typeof(Code.Gameplay.Features.GrapplingHook.Descending),
        typeof(Code.Gameplay.Features.GrapplingHook.DescentAvailable),
        typeof(Code.Gameplay.Features.GrapplingHook.DescentRequested),
        typeof(Code.Gameplay.Features.GrapplingHook.GrapplingHook),
        typeof(Code.Gameplay.Features.GrapplingHook.GrapplingHookBehaviourComponent),
        typeof(Code.Gameplay.Features.GrapplingHook.HookSpeedModifier),
        typeof(Code.Gameplay.Features.GrapplingHook.StopMovementRaycastRadius),
        typeof(Code.Gameplay.Features.GrapplingHook.XAxisMoveDirection),
        typeof(Code.Gameplay.Features.GrapplingHook.XAxisMovementAvailable),
        typeof(Code.Gameplay.Features.GrapplingHook.XAxisSpeed),
        typeof(Code.Gameplay.Features.GrapplingHook.XMovementLimits),
        typeof(Code.Gameplay.Features.GrapplingHook.YAxisDownSpeed),
        typeof(Code.Gameplay.Features.GrapplingHook.YAxisUpSpeed),
        typeof(Code.Gameplay.Features.Loot.Applied),
        typeof(Code.Gameplay.Features.Loot.Available),
        typeof(Code.Gameplay.Features.Loot.BaseRating),
        typeof(Code.Gameplay.Features.Loot.Collected),
        typeof(Code.Gameplay.Features.Loot.ConsumableIngredient),
        typeof(Code.Gameplay.Features.Loot.Consumed),
        typeof(Code.Gameplay.Features.Loot.Effect),
        typeof(Code.Gameplay.Features.Loot.EffectTargetsLoot),
        typeof(Code.Gameplay.Features.Loot.EffectValue),
        typeof(Code.Gameplay.Features.Loot.IncreaseValueEffect),
        typeof(Code.Gameplay.Features.Loot.Loot),
        typeof(Code.Gameplay.Features.Loot.LootEffectsApplier),
        typeof(Code.Gameplay.Features.Loot.LootItemComponent),
        typeof(Code.Gameplay.Features.Loot.LootItemUIComponent),
        typeof(Code.Gameplay.Features.Loot.LootTypeIdComponent),
        typeof(Code.Gameplay.Features.Loot.Rating),
        typeof(Code.Gameplay.Features.Loot.TimerRefillAmount),
        typeof(Code.Gameplay.Features.Loot.Wood),
        typeof(Code.Gameplay.Features.LootSpawning.ContinuousSpawn),
        typeof(Code.Gameplay.Features.LootSpawning.ConveyorSpawner),
        typeof(Code.Gameplay.Features.LootSpawning.LootSpawner),
        typeof(Code.Gameplay.Features.LootSpawning.LootSpawnInterval),
        typeof(Code.Gameplay.Features.LootSpawning.SingleSpawn),
        typeof(Code.Gameplay.Features.Orders.BossOrder),
        typeof(Code.Gameplay.Features.Orders.Complete),
        typeof(Code.Gameplay.Features.Orders.NextOrderRequest),
        typeof(Code.Gameplay.Features.Orders.Order),
        typeof(Code.Gameplay.Features.Orders.OrderDataComponent),
        typeof(Code.Gameplay.Features.Orders.OrderReward),
        typeof(Code.Gameplay.Features.Orders.Reject),
        typeof(Code.Gameplay.Features.Orders.ResultProcessed),
        typeof(Code.Gameplay.Features.RoundState.DayCompleteRequest),
        typeof(Code.Gameplay.Features.RoundState.GameOver),
        typeof(Code.Gameplay.Features.RoundState.Round),
        typeof(Code.Gameplay.Features.RoundState.RoundComplete),
        typeof(Code.Gameplay.Features.RoundState.RoundDuration),
        typeof(Code.Gameplay.Features.RoundState.RoundInProcess),
        typeof(Code.Gameplay.Features.RoundState.RoundOver),
        typeof(Code.Gameplay.Features.RoundState.RoundStartAvailable),
        typeof(Code.Gameplay.Features.RoundState.RoundStartRequest),
        typeof(Code.Gameplay.Features.RoundState.RoundStateController),
        typeof(Code.Gameplay.Features.RoundState.RoundStateViewBehaviourComponent),
        typeof(Code.Gameplay.Features.RoundState.RoundTimeLeft),
        typeof(Code.Gameplay.Sound.AudioSourceBehaviourComponent)
    };
}
