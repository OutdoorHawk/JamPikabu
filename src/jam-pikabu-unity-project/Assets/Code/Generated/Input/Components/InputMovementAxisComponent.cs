//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class InputMatcher {

    static Entitas.IMatcher<InputEntity> _matcherMovementAxis;

    public static Entitas.IMatcher<InputEntity> MovementAxis {
        get {
            if (_matcherMovementAxis == null) {
                var matcher = (Entitas.Matcher<InputEntity>)Entitas.Matcher<InputEntity>.AllOf(InputComponentsLookup.MovementAxis);
                matcher.componentNames = InputComponentsLookup.componentNames;
                _matcherMovementAxis = matcher;
            }

            return _matcherMovementAxis;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class InputContext {

    public InputEntity movementAxisEntity { get { return GetGroup(InputMatcher.MovementAxis).GetSingleEntity(); } }
    public MovementAxisComponent movementAxis { get { return movementAxisEntity.movementAxis; } }
    public UnityEngine.Vector2 MovementAxis { get { return movementAxis.Value; } }
    public bool hasMovementAxis { get { return movementAxisEntity != null; } }

    public InputEntity SetMovementAxis(UnityEngine.Vector2 newValue) {
        if (hasMovementAxis) {
            throw new Entitas.EntitasException("Could not set MovementAxis!\n" + this + " already has an entity with MovementAxisComponent!",
                "You should check if the context already has a movementAxisEntity before setting it or use context.ReplaceMovementAxis().");
        }
        var entity = CreateEntity();
        entity.AddMovementAxis(newValue);
        return entity;
    }

    public void ReplaceMovementAxis(UnityEngine.Vector2 newValue) {
        var entity = movementAxisEntity;
        if (entity == null) {
            entity = SetMovementAxis(newValue);
        } else {
            entity.ReplaceMovementAxis(newValue);
        }
    }

    public void RemoveMovementAxis() {
        movementAxisEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class InputEntity {

    public MovementAxisComponent movementAxis { get { return (MovementAxisComponent)GetComponent(InputComponentsLookup.MovementAxis); } }
    public UnityEngine.Vector2 MovementAxis { get { return movementAxis.Value; } }
    public bool hasMovementAxis { get { return HasComponent(InputComponentsLookup.MovementAxis); } }

    public InputEntity AddMovementAxis(UnityEngine.Vector2 newValue) {
        var index = InputComponentsLookup.MovementAxis;
        var component = (MovementAxisComponent)CreateComponent(index, typeof(MovementAxisComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public InputEntity ReplaceMovementAxis(UnityEngine.Vector2 newValue) {
        var index = InputComponentsLookup.MovementAxis;
        var component = (MovementAxisComponent)CreateComponent(index, typeof(MovementAxisComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public InputEntity RemoveMovementAxis() {
        RemoveComponent(InputComponentsLookup.MovementAxis);
        return this;
    }
}
